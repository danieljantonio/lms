// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  schoolId      String?
  school        School?           @relation(fields: [schoolId], references: [id])
  classrooms       UsersOnClassrooms[]
  role          Role             @default(STUDENT)
  tests         Test[]
}

model VerificationToken {
  identifier String
  token      String        @unique
  expires    DateTime

  @@unique([identifier, token])
}

model School {
  id      String            @id @default(cuid())
  name    String
  classrooms Classroom[]
  users   User[]
  code  String              @unique
}

model Classroom {
  id       String           @id @default(cuid())
  name     String
  code     String           @unique
  schoolId String
  school   School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  users    UsersOnClassrooms[]
  Test     Test[]
}

model Test {
  id          String        @id @default(cuid())
  name        String
  code        String        @unique
  questions   MCQQuestion[]
  testAnswers TestAnswer[]
  teacher     User          @relation(fields: [userId], references: [id])
  classroom   Classroom         @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  userId      String
  classroomId     String
}

model TestAnswer {
  id     String @id @default(cuid())
  testId String
  test   Test   @relation(fields: [testId], references: [id], onDelete: Cascade)
  mark   Int?
}

// model MCQAnswer {}

model MCQQuestion {
  id            String  @id @default(cuid())
  question      String
  correctAnswer String
  wrongAnswers  String[]
  test          Test?   @relation(fields: [testId], references: [id])
  testId        String?
}

model EssayQuestion {
  id       String @id @default(cuid())
  question String
}

model UsersOnClassrooms {
  classroom     Classroom  @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId   String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  classroomRole Role   @default(STUDENT)

  @@id([classroomId, userId])
}

enum Role {
  ADMIN
  PRINCIPAL
  TEACHER
  STUDENT
}
