// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String              @id @default(cuid())
  name          String?
  email         String?             @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  schoolId      String?
  school        School?             @relation(fields: [schoolId], references: [id])
  classrooms    UsersOnClassrooms[]
  role          Role                @default(STUDENT)
  studentTest   StudentTest[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model School {
  id         String      @id @default(cuid())
  name       String
  classrooms Classroom[]
  users      User[]
  code       String      @unique
}

model Classroom {
  id       String              @id @default(cuid())
  name     String
  code     String              @unique
  schoolId String
  school   School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  users    UsersOnClassrooms[]
  test     Test[]
}

model Test {
  id          String        @id @default(cuid())
  name        String
  questions   MCQQuestion[]
  classroom   Classroom     @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId String
  startDate   DateTime
  endDate     DateTime
  duration    Int
  studentTest StudentTest[]
}

model MCQQuestion {
  id                     String                   @id @default(cuid())
  questionNo             Int
  question               String
  choices                MCQChoice[]
  test                   Test?                    @relation(fields: [testId], references: [id])
  testId                 String?
  questionsOnStudentTest QuestionsOnStudentTest[]
}

model MCQChoice {
  id                     String                   @id @default(cuid())
  answer                 String
  isCorrect              Boolean
  question               MCQQuestion?             @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId             String?
  questionsOnStudentTest QuestionsOnStudentTest[]
}

model StudentTest {
  id            String     @id @default(cuid())
  test          Test?      @relation(fields: [testId], references: [id])
  testId        String?
  score         Float?
  startDate     DateTime   @default(now())
  endDate       DateTime
  submittedDate DateTime?
  userId        String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  status        TestStatus @default(InProgress)

  questions QuestionsOnStudentTest[]
}

model QuestionsOnStudentTest {
  questionNo Int // This tracks the order which the test is done in.

  studentTest   StudentTest @relation(fields: [studentTestId], references: [id], onDelete: Cascade)
  studentTestId String

  question   MCQQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String

  // This indicates the answer chosen by the student.
  chosenAnswer   MCQChoice? @relation(fields: [chosenAnswerId], references: [id])
  chosenAnswerId String?

  @@id([questionId, studentTestId])
}

model UsersOnClassrooms {
  classroom     Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId   String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  classroomRole Role      @default(STUDENT)

  @@id([classroomId, userId])
}

enum TestStatus {
  NotStarted
  InProgress
  Completed
  Graded
}

enum Role {
  ADMIN
  PRINCIPAL
  TEACHER
  STUDENT
}
