generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// User Data
// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String              @id @default(cuid())
  name             String?
  username         String              @unique
  password         String
  accounts         Account[]
  sessions         Session[]
  schoolId         String?
  school           School?             @relation(fields: [schoolId], references: [id])
  role             Role                @default(STUDENT)
  studentTest      TakenTest[]
  classroomsTaught Classroom[]         @relation("classroomsTaught")
  classrooms       ClassroomStudents[]

  @@index([schoolId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// School Data
model School {
  id         String      @id @default(cuid())
  name       String
  classrooms Classroom[]
  users      User[]
  code       String      @unique
}

model Classroom {
  id        String              @id @default(cuid())
  name      String
  code      String              @unique
  schoolId  String
  school    School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  teacher   User?               @relation(fields: [teacherId], references: [id], name: "classroomsTaught")
  teacherId String?
  tests     Test[]
  grade     Int
  students  ClassroomStudents[]

  @@index([schoolId])
}

model ClassroomStudents {
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@unique([classroomId, userId], map: "classroomStudentId")
  @@index([classroomId, userId])
}

model Test {
  id           String      @id @default(cuid())
  name         String
  questions    Question[]
  description  String?
  classroom    Classroom   @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId  String
  startDate    DateTime
  endDate      DateTime
  duration     Int
  passcode     String
  studentTests TakenTest[]
  published    Boolean     @default(false)

  @@index([classroomId])
}

model TakenTest {
  id        String   @id @default(cuid())
  student   User     @relation(fields: [studentId], references: [id])
  test      Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  startDate DateTime @default(now())
  endDate   DateTime
  studentId String
  testId    String
  answers   Answer[]
}

model Question {
  id       String   @id @default(cuid())
  question String
  test     Test?    @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId   String?
  image    String?
  isEssay  Boolean  @default(false)
  answer   Answer[]
  choices  Choice[]

  @@index([testId])
}

model Choice {
  id         String   @id @default(cuid())
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  choice     String
  isCorrect  Boolean  @default(false)
  Answer     Answer[]
}

model Answer {
  id          String    @id @default(cuid())
  questionNo  Int
  question    Question  @relation(fields: [questionId], references: [id])
  questionId  String
  takenTest   TakenTest @relation(fields: [takenTestId], references: [id], onDelete: Cascade)
  takenTestId String
  choice      Choice    @relation(fields: [choiceId], references: [id])
  choiceId    String
  userId      String?

  @@unique([takenTestId, questionId], map: "answerId")
}

// Enums
enum Role {
  ADMIN
  PRINCIPAL
  TEACHER
  STUDENT
}
