generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// User Data
// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id          String              @id @default(cuid())
  name        String?
  username    String              @unique
  password    String
  accounts    Account[]
  sessions    Session[]
  schoolId    String?
  school      School?             @relation(fields: [schoolId], references: [id])
  classrooms  UsersOnClassrooms[]
  role        Role                @default(STUDENT)
  studentTest StudentTest[]

  @@index([schoolId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// School Data
model School {
  id         String      @id @default(cuid())
  name       String
  classrooms Classroom[]
  users      User[]
  code       String      @unique
}

model Classroom {
  id            String              @id @default(cuid())
  name          String
  code          String              @unique
  schoolId      String
  school        School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  users         UsersOnClassrooms[]
  testTemplates TestTemplate[]
  grade         Int

  @@index([schoolId])
}

model UsersOnClassrooms {
  classroom     Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId   String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  classroomRole Role      @default(STUDENT)

  @@unique([classroomId, userId], map: "usersOnClassroomsId")
  @@index([classroomId, userId])
}

model TestTemplate {
  id          String        @id @default(cuid())
  name        String
  questions   Question[]
  classroom   Classroom     @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId String
  startDate   DateTime
  endDate     DateTime
  duration    Int
  StudentTest StudentTest[]

  @@index([classroomId])
}

model StudentTest {
  id                 String               @id @default(cuid())
  student            User                 @relation(fields: [studentId], references: [id])
  testTemplate       TestTemplate         @relation(fields: [testTemplateId], references: [id], onDelete: Cascade)
  startDate          DateTime             @default(now())
  endDate            DateTime
  studentId          String
  testTemplateId     String
  StudentTestResults StudentTestResults[]
}

model StudentTestResults {
  questionOrder  Int
  studentTest    StudentTest @relation(fields: [studentTestId], references: [id], onDelete: Cascade)
  studentTestId  String
  question       Question    @relation(fields: [questionId], references: [id])
  questionId     String
  chosenAnswer   Choice?     @relation(fields: [chosenAnswerId], references: [id])
  chosenAnswerId String?

  @@unique([studentTestId, questionId], map: "studentTestResultsId")
  @@index([studentTestId, questionId])
}

model Question {
  id                 String               @id @default(cuid())
  questionNo         Int
  question           String
  choices            Choice[]
  testTemplate       TestTemplate?        @relation(fields: [testTemplateId], references: [id], onDelete: Cascade)
  testTemplateId     String?
  StudentTestResults StudentTestResults[]
  hasImage           Boolean              @default(false)

  @@index([testTemplateId])
}

model Choice {
  id                 String               @id @default(cuid())
  answer             String
  question           Question?            @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId         String?
  isCorrect          Boolean
  StudentTestResults StudentTestResults[]

  @@index([questionId])
}

// Enums
enum Role {
  ADMIN
  PRINCIPAL
  TEACHER
  STUDENT
}
